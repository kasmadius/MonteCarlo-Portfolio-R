c2<- ggplot(lowvol_ret, aes(x=minvarReturn)) +
geom_histogram(fill="white", color="black")+
geom_vline(aes(xintercept=mean(minvarReturn,na.rm=TRUE)), color="blue",
linetype="dashed")+
labs(title="Min Variance",x="Return", y = "Frequency")+
theme_classic()
c3<- ggplot(lowvol_ret, aes(x=maxdivReturn)) +
geom_histogram(fill="white", color="black")+
geom_vline(aes(xintercept=mean(maxdivReturn,na.rm=TRUE)), color="blue",
linetype="dashed")+
labs(title="Max Diversification",x="Return", y = "Frequency")+
theme_classic()
c4<-ggplot(lowvol_ret, aes(x=maxdecReturn)) +
geom_histogram(fill="white", color="black")+
geom_vline(aes(xintercept=mean(maxdecReturn,na.rm=TRUE)), color="blue",
linetype="dashed")+
labs(title="Max Decorrelation",x="Return", y = "Frequency")+
theme_classic()
c5<-ggplot(lowvol_ret, aes(x=equalweightsReturn)) +
geom_histogram(fill="white", color="black")+
geom_vline(aes(xintercept=mean(equalweightsReturn,na.rm=TRUE)), color="blue",
linetype="dashed")+
labs(title="Equal Weights",x="Return", y = "Frequency")+
theme_classic()
figure3<-ggarrange(c1,c2,c3,c4,c5,
ncol=3,nrow=2)
annotate_figure(figure3,
top = text_grob("Portfolio of Low Volatility Stocks", color = "black", face = "bold", size = 14),
fig.lab = "Figure 3", fig.lab.face = "bold")
#High volatility
d1<- ggplot(highvol_ret, aes(x=meanvarReturn)) +
geom_histogram(fill="white", color="black")+
geom_vline(aes(xintercept=mean(meanvarReturn,na.rm=TRUE)), color="blue",
linetype="dashed")+
labs(title="Mean Variance",x="Return", y = "Frequency")+
theme_classic()
d2<- ggplot(highvol_ret, aes(x=minvarReturn)) +
geom_histogram(fill="white", color="black")+
geom_vline(aes(xintercept=mean(minvarReturn,na.rm=TRUE)), color="blue",
linetype="dashed")+
labs(title="Min Variance",x="Return", y = "Frequency")+
theme_classic()
d3<- ggplot(highvol_ret, aes(x=maxdivReturn)) +
geom_histogram(fill="white", color="black")+
geom_vline(aes(xintercept=mean(maxdivReturn,na.rm=TRUE)), color="blue",
linetype="dashed")+
labs(title="Max Diversification",x="Return", y = "Frequency")+
theme_classic()
d4<-ggplot(highvol_ret, aes(x=maxdecReturn)) +
geom_histogram(fill="white", color="black")+
geom_vline(aes(xintercept=mean(maxdecReturn,na.rm=TRUE)), color="blue",
linetype="dashed")+
labs(title="Max Decorrelation",x="Return", y = "Frequency")+
theme_classic()
d5<-ggplot(highvol_ret, aes(x=equalweightsReturn)) +
geom_histogram(fill="white", color="black")+
geom_vline(aes(xintercept=mean(equalweightsReturn,na.rm=TRUE)), color="blue",
linetype="dashed")+
labs(title="Equal Weights",x="Return", y = "Frequency")+
theme_classic()
figure4<-ggarrange(d1,d2,d3,d4,d5,
ncol=3,nrow=2)
annotate_figure(figure4,
top = text_grob("Portfolio of High Volatility Stocks", color = "black", face = "bold", size = 14),
fig.lab = "Figure 4 ", fig.lab.face = "bold")
#Confidence Intervals
#All Normal
allnorm_CI=MeanCI(allnorm_ret$meanvarReturn, conf.level = 0.95,na.rm=TRUE)
allnorm_CI=rbind(allnorm_CI,MeanCI(allnorm_ret$minvarReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(allnorm_ret$maxdivReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(allnorm_ret$maxdecReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(allnorm_ret$equalweightsReturn, conf.level = 0.95,na.rm=TRUE))
allnorm_CI=round(allnorm_CI,6)
#Mixed
mix_CI=MeanCI(mix_ret$meanvarReturn, conf.level = 0.95,na.rm=TRUE)
mix_CI=rbind(mix_CI,MeanCI(mix_ret$minvarReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(mix_ret$maxdivReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(mix_ret$maxdecReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(mix_ret$equalweightsReturn, conf.level = 0.95,na.rm=TRUE))
mix_CI=round(mix_CI,6)
#Low Volatility
low_CI=MeanCI(lowvol_ret$meanvarReturn, conf.level = 0.95,na.rm=TRUE)
low_CI=rbind(low_CI,MeanCI(lowvol_ret$minvarReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(lowvol_ret$maxdivReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(lowvol_ret$maxdecReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(lowvol_ret$equalweightsReturn, conf.level = 0.95,na.rm=TRUE))
low_CI=round(low_CI,6)
#High Volatility
high_CI=MeanCI(highvol_ret$meanvarReturn, conf.level = 0.95,na.rm=TRUE)
high_CI=rbind(high_CI,MeanCI(highvol_ret$minvarReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(highvol_ret$maxdivReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(highvol_ret$maxdecReturn, conf.level = 0.95,na.rm=TRUE),
MeanCI(highvol_ret$equalweightsReturn, conf.level = 0.95,na.rm=TRUE))
high_CI=round(high_CI,6)
#Tables
#All norm
t1=data.frame(rbind(allnorm_mean[1:3],allnorm_mean[4:6],allnorm_mean[7:9],allnorm_mean[10:12],allnorm_mean[13:15]))
t1=cbind(t1,allnorm_CI[,2:3])
rownames(t1)<-c("Mean Variance","Min Variance","Max Diversification","Max Decorrelation","Equal Weights")
colnames(t1)<- c("Return (%)","Variance (%)","Sharpe", "Lower CI","Upper CI")
t1[1:2]<-t1[1:2]*100
t1[4:5]<-t1[4:5]*100
t1
t1 %>%
kbl(caption = "Table 1: Portfolio of All Normal Stocks") %>%
kable_classic(full_width = F, html_font = "Cambria")
#Mixed
t2=data.frame(rbind(mix_ret_mean[1:3],mix_ret_mean[4:6],mix_ret_mean[7:9],mix_ret_mean[10:12],mix_ret_mean[13:15]))
t2=cbind(t2,mix_CI[,2:3])
rownames(t2)<-c("Mean Variance","Min Variance","Max Diversification","Max Decorrelation","Equal Weights")
colnames(t2)<- c("Return (%)","Variance (%)","Sharpe", "Lower CI","Upper CI")
t2[1:2]<-t2[1:2]*100
t2[4:5]<-t2[4:5]*100
t2
t2 %>%
kbl(caption = "Table 2: Portfolio of Mixed Distribution Stocks") %>%
kable_classic(full_width = F, html_font = "Cambria")
#Low Volatility
t3=data.frame(rbind(lowvol_mean[1:3],lowvol_mean[4:6],lowvol_mean[7:9],lowvol_mean[10:12],lowvol_mean[13:15]))
t3=cbind(t3,low_CI[,2:3])
rownames(t3)<-c("Mean Variance","Min Variance","Max Diversification","Max Decorrelation","Equal Weights")
colnames(t3)<- c("Return (%)","Variance (%)","Sharpe", "Lower CI","Upper CI")
t3[1:2]<-t3[1:2]*100
t3[4:5]<-t3[4:5]*100
t3
t3 %>%
kbl(caption = "Table 3: Portfolio of Low Volatility Stocks") %>%
kable_classic(full_width = F, html_font = "Cambria")
#High Volatility
t4=data.frame(rbind(highvol_mean[1:3],highvol_mean[4:6],highvol_mean[7:9],highvol_mean[10:12],highvol_mean[13:15]))
t4=cbind(t4,high_CI[,2:3])
rownames(t4)<-c("Mean Variance","Min Variance","Max Diversification","Max Decorrelation","Equal Weights")
colnames(t4)<- c("Return (%)","Variance (%)","Sharpe", "Lower CI","Upper CI")
t4[1:2]<-t4[1:2]*100
t4[4:5]<-t4[4:5]*100
t4
t4 %>%
kbl(caption = "Table 4: Portfolio of High Volatility Stocks") %>%
kable_classic(full_width = F, html_font = "Cambria")
stockPrices = scenario_stock_generation(253, "allnormal")
stockReturns = apply(stockPrices, 2, D_ret)
stockReturns = as.timeSeries(stockReturns)
meanReturns=as.matrix(colMeans(stockReturns))
covariancematrix=cov(stockReturns)*tradingdays
covariancematrix
meanReturns
annualized_ret = function (x) (((x+1)^tradingdays)-1)
stockPrices = scenario_stock_generation(253, "allnormal")
stockReturns = apply(stockPrices, 2, D_ret)
stockReturns = as.timeSeries(stockReturns)
meanReturns=as.matrix(colMeans(stockReturns))
meanReturns=apply(meanReturns , 2 , annualized_ret)
covariancematrix=cov(stockReturns)*tradingdays
covariancematrix= as.matrix(covariancematrix)
meanvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='mv',constraint='lo')))
stockReturns = apply(stockPrices, 2, D_ret)
stockReturns = as.timeSeries(stockReturns)
meanReturns=as.matrix(colMeans(stockReturns))
meanReturns=apply(meanReturns , 2 , annualized_ret)
covariancematrix=cov(stockReturns)*tradingdays
covariancematrix= as.matrix(covariancematrix)
meanvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='mv',constraint='lo')))
minvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='minvol',constraint='lo')))
maxdiv=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdiv',constraint='lo')))
maxdec=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdec',constraint='lo')))
equalweights = as.matrix(c(0.2,0.2,0.2,0.2,0.2))
meanvarReturn =  t(meanvar) %*% meanReturns
meanvarVariance =  t(meanvar) %*% covariancematrix %*% meanvar
meanvarSharpe = meanvarReturn / sqrt(meanvarVariance)
minvarReturn =  t(minvar) %*% meanReturns
minvarVariance =  t(minvar) %*%  covariancematrix %*% minvar
minvarSharpe = minvarReturn / sqrt(minvarVariance)
maxdivReturn =  t(maxdiv) %*% meanReturns
maxdivVariance =  t(maxdiv) %*%  covariancematrix %*% maxdiv
maxdivSharpe = maxdivReturn / sqrt(maxdivVariance)
maxdecReturn =  t(maxdec) %*% meanReturns
maxdecVariance =  t(maxdec) %*%  covariancematrix %*% maxdec
maxdecSharpe = maxdecReturn / sqrt(maxdecVariance)
equalweightsReturn =  t(equalweights) %*% meanReturns
equalweightsVariance =  t(equalweights) %*%  covariancematrix %*% equalweights
equalweightsSharpe = equalweightsReturn / sqrt(equalweightsVariance)
meanReturns
portfolio_simulation(1 , 253 , "allnormal",1)
portfolio_simulation(1 , 253 , "allnormal",1)
stockPrices = scenario_stock_generation(253, "allnormal")
stockReturns = apply(stockPrices, 2, D_ret)
stockReturns = as.timeSeries(stockReturns)
meanReturns=as.matrix(colMeans(stockReturns))
meanReturns=apply(meanReturns , 2 , annualized_ret)
covariancematrix=cov(stockReturns)*tradingdays
covariancematrix= as.matrix(covariancematrix)
meanvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='mv',constraint='lo')))
minvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='minvol',constraint='lo')))
maxdiv=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdiv',constraint='lo')))
maxdec=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdec',constraint='lo')))
equalweights = as.matrix(c(0.2,0.2,0.2,0.2,0.2))
meanvarReturn =  t(meanvar) %*% meanReturns
meanvarVariance =  t(meanvar) %*% covariancematrix %*% meanvar
meanvarSharpe = meanvarReturn / sqrt(meanvarVariance)
minvarReturn =  t(minvar) %*% meanReturns
minvarVariance =  t(minvar) %*%  covariancematrix %*% minvar
minvarSharpe = minvarReturn / sqrt(minvarVariance)
maxdivReturn =  t(maxdiv) %*% meanReturns
maxdivVariance =  t(maxdiv) %*%  covariancematrix %*% maxdiv
maxdivSharpe = maxdivReturn / sqrt(maxdivVariance)
maxdecReturn =  t(maxdec) %*% meanReturns
maxdecVariance =  t(maxdec) %*%  covariancematrix %*% maxdec
maxdecSharpe = maxdecReturn / sqrt(maxdecVariance)
equalweightsReturn =  t(equalweights) %*% meanReturns
equalweightsVariance =  t(equalweights) %*%  covariancematrix %*% equalweights
equalweightsSharpe = equalweightsReturn / sqrt(equalweightsVariance)
stockPrices = scenario_stock_generation(253, "allnormal")
stockReturns = apply(stockPrices, 2, D_ret)
stockReturns = as.timeSeries(stockReturns)
meanReturns=as.matrix(colMeans(stockReturns))
meanReturns=apply(meanReturns , 2 , annualized_ret)
covariancematrix=cov(stockReturns)*tradingdays
covariancematrix= as.matrix(covariancematrix)
meanvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='mv',constraint='lo')))
minvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='minvol',constraint='lo')))
maxdiv=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdiv',constraint='lo')))
maxdec=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdec',constraint='lo')))
equalweights = as.matrix(c(0.2,0.2,0.2,0.2,0.2))
meanvarReturn =  t(meanvar) %*% meanReturns
meanvarVariance =  t(meanvar) %*% covariancematrix %*% meanvar
meanvarSharpe = meanvarReturn / sqrt(meanvarVariance)
minvarReturn =  t(minvar) %*% meanReturns
minvarVariance =  t(minvar) %*%  covariancematrix %*% minvar
minvarSharpe = minvarReturn / sqrt(minvarVariance)
maxdivReturn =  t(maxdiv) %*% meanReturns
maxdivVariance =  t(maxdiv) %*%  covariancematrix %*% maxdiv
maxdivSharpe = maxdivReturn / sqrt(maxdivVariance)
maxdecReturn =  t(maxdec) %*% meanReturns
maxdecVariance =  t(maxdec) %*%  covariancematrix %*% maxdec
maxdecSharpe = maxdecReturn / sqrt(maxdecVariance)
equalweightsReturn =  t(equalweights) %*% meanReturns
equalweightsVariance =  t(equalweights) %*%  covariancematrix %*% equalweights
equalweightsSharpe = equalweightsReturn / sqrt(equalweightsVariance)
stockPrices = scenario_stock_generation(253, "allnormal")
stockReturns = apply(stockPrices, 2, D_ret)
stockReturns = as.timeSeries(stockReturns)
meanReturns=as.matrix(colMeans(stockReturns))
meanReturns=apply(meanReturns , 2 , annualized_ret)
covariancematrix=cov(stockReturns)*tradingdays
covariancematrix= as.matrix(covariancematrix)
meanvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='mv',constraint='lo')))
minvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='minvol',constraint='lo')))
maxdiv=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdiv',constraint='lo')))
maxdec=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdec',constraint='lo')))
equalweights = as.matrix(c(0.2,0.2,0.2,0.2,0.2))
meanvarReturn =  t(meanvar) %*% meanReturns
meanvarVariance =  t(meanvar) %*% covariancematrix %*% meanvar
meanvarSharpe = meanvarReturn / sqrt(meanvarVariance)
minvarReturn =  t(minvar) %*% meanReturns
minvarVariance =  t(minvar) %*%  covariancematrix %*% minvar
minvarSharpe = minvarReturn / sqrt(minvarVariance)
maxdivReturn =  t(maxdiv) %*% meanReturns
maxdivVariance =  t(maxdiv) %*%  covariancematrix %*% maxdiv
maxdivSharpe = maxdivReturn / sqrt(maxdivVariance)
maxdecReturn =  t(maxdec) %*% meanReturns
maxdecVariance =  t(maxdec) %*%  covariancematrix %*% maxdec
maxdecSharpe = maxdecReturn / sqrt(maxdecVariance)
equalweightsReturn =  t(equalweights) %*% meanReturns
equalweightsVariance =  t(equalweights) %*%  covariancematrix %*% equalweights
equalweightsSharpe = equalweightsReturn / sqrt(equalweightsVariance)
str(meanReturns)
stockPrices = scenario_stock_generation(253, "allnormal")
stockReturns = apply(stockPrices, 2, D_ret)
stockReturns = as.timeSeries(stockReturns)
meanReturns=as.matrix(colMeans(stockReturns))
meanReturns=apply(meanReturns , 2 , annualized_ret)
covariancematrix=cov(stockReturns)*tradingdays
covariancematrix= as.matrix(covariancematrix)
meanvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='mv',constraint='lo')))
minvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='minvol',constraint='lo')))
maxdiv=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdiv',constraint='lo')))
maxdec=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdec',constraint='lo')))
equalweights = as.matrix(c(0.2,0.2,0.2,0.2,0.2))
meanvarReturn =  t(meanvar) %*% meanReturns
meanvarVariance =  t(meanvar) %*% covariancematrix %*% meanvar
meanvarSharpe = meanvarReturn / sqrt(meanvarVariance)
minvarReturn =  t(minvar) %*% meanReturns
minvarVariance =  t(minvar) %*%  covariancematrix %*% minvar
minvarSharpe = minvarReturn / sqrt(minvarVariance)
maxdivReturn =  t(maxdiv) %*% meanReturns
maxdivVariance =  t(maxdiv) %*%  covariancematrix %*% maxdiv
maxdivSharpe = maxdivReturn / sqrt(maxdivVariance)
maxdecReturn =  t(maxdec) %*% meanReturns
maxdecVariance =  t(maxdec) %*%  covariancematrix %*% maxdec
maxdecSharpe = maxdecReturn / sqrt(maxdecVariance)
equalweightsReturn =  t(equalweights) %*% meanReturns
equalweightsVariance =  t(equalweights) %*%  covariancematrix %*% equalweights
equalweightsSharpe = equalweightsReturn / sqrt(equalweightsVariance)
portfolio_simulation(1000 , 253 , "allnormal", 1)
library(ggplot2)
library(RiskPortfolios)
library(timeSeries)
library(fPortfolio)
library(caTools)
library(PerformanceAnalytics)
library(TTR)
library(ggpubr)
library(kableExtra)
library(DescTools)
library(Matrix)
# Local functions
cbrt <- function (x) {
sign(x) * abs(x)^(1/3)
}
#U-quadratic shape distributed returns (with paramets a = -b) for 253 days
ruquad <- function(upper_bound , nsim) {
b <- upper_bound
a <- -b
Beta <- (b+a)/2
Alpha <- 12/((b-a)^3)
unif <- runif(nsim , min = 0 , max = 1)
df_unif <- as.data.frame(unif)
df_uquad <- within(df_unif ,x <- (((3*unif)/Alpha)-((Beta-a)^3)))
df_uquad <- apply(df_uquad , 2 , cbrt)
uquad_ret <- df_uquad[,2]
return(uquad_ret)
}
#Distribution generation of stock returns for a specified number of days
#and type(normal, lognormal, exponential)
generate_distribution <- function(number, type, volatility) {
tradingdays<-number
m <- runif(1, min= -0.02, max = 0.02)
if(volatility == "high") {
s <- runif(1, min=0.05, max = 0.25)
} else if(volatility == "low") {
s <- runif(1, min=0.001, max = 0.02)
} else {
s <- runif(1, min=0.01, max = 0.05)
}
up <- runif(1 , min=0.03 , max = 0.1)
lambda = runif(1, min=25, max=50)
dailyreturns = c()
minimumPrice = 0.001
maximumPrice = 15
if(type == "normal") {
dailyreturns <-rnorm(n=tradingdays,m,s)
mean(dailyreturns)
sd(dailyreturns)
} else if(type == "lognormal") {
meanlog<-log(m^2/sqrt(s^2+m^2))
stdlog<- sqrt(log(1+(s^2/m^2)))
#Vector of daily returns
dailyreturns<- rlnorm(n=tradingdays,meanlog,stdlog)
mean(dailyreturns)
sd(dailyreturns)
} else if(type == "exponential") {
maximumPrice = 0.15
dailyreturns = rexp(n=tradingdays, rate = lambda )
mean(dailyreturns)
sd(dailyreturns)
} else if(type == "uquad") {
dailyreturns = ruquad(up ,tradingdays)
mean(dailyreturns)
sd(dailyreturns)
} else {
stop("No specified distribution")
}
# Generating Daily Price from Returns
STK_PRC <- runif(1, min = minimumPrice, max = maximumPrice)
r <-dailyreturns
stock_prices = c()
for (i in seq(tradingdays))
{
STK_PRC <- STK_PRC*(1+r[i])
stock_prices<- c(stock_prices,STK_PRC)
}
return(stock_prices)
}
#Stock distribution generation based on scenarios
scenario_stock_generation <- function(tradingdays, scenario) {
tickers = c("A", "B", "C", "D", "E")
stockPrices = NULL
if(scenario == "allnormal") {
for (ticker in tickers) {
stockPrices = cbind(stockPrices,
generate_distribution(tradingdays, "normal",""))
}
} else if(scenario == "mix") {
for (ticker in tickers) {
if(ticker == "B") {
stockPrices = cbind(stockPrices,
generate_distribution(tradingdays, "exponential",""))
} else if(ticker == "C") {
stockPrices = cbind(stockPrices,
generate_distribution(tradingdays, "lognormal",""))
} else if(ticker == "D") {
stockPrices = cbind(stockPrices,
generate_distribution(tradingdays, "uquad",""))
} else {
stockPrices = cbind(stockPrices,
generate_distribution(tradingdays, "normal",""))
}
}
} else if(scenario=="low volatility") {
for (ticker in tickers) {
stockPrices = cbind(stockPrices,
generate_distribution(tradingdays, "normal", "low"))
}
} else if(scenario=="high volatility") {
for (ticker in tickers) {
stockPrices = cbind(stockPrices,
generate_distribution(tradingdays, "normal", "high"))
}
}else {
stop("No specified scenario")
}
colnames(stockPrices) = tickers
return(stockPrices)
}
#Rate of change calculation
D_ret = function(x) na.omit(ROC(x, type="discrete"))
annualized_ret = function (x) (((x+1)^tradingdays)-1)
#Monte Carlo Simulation for portfolios based on tradingdays, numsimulations and
#scenarios
portfolio_simulation <- function(simulations,tradingdays, scenario, figindex) {
portfolio_returns = data.frame(meanvarReturn=NA, meanvarVariance=NA, meanvarSharpe=NA,
minvarReturn= NA, minvarVariance=NA, minvarSharpe=NA,
maxdivReturn=NA, maxdivVariance=NA, maxdivSharpe=NA,
maxdecReturn=NA, maxdecVariance=NA, maxdecSharpe=NA,
equalweightsReturn=NA, equalweightsVariance=NA, equalweightsSharpe=NA)
newrow = NULL
for (i in seq(simulations)) {
stockPrices = scenario_stock_generation(tradingdays, scenario)
stockReturns = apply(stockPrices, 2, D_ret)
stockReturns = as.timeSeries(stockReturns)
meanReturns=as.matrix(colMeans(stockReturns))
meanReturns=apply(meanReturns , 2 , annualized_ret)
meanReturns=as.matrix(meanReturns)
covariancematrix=cov(stockReturns)*tradingdays
covariancematrix= as.matrix(covariancematrix)
meanvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='mv',constraint='lo')))
minvar=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='minvol',constraint='lo')))
maxdiv=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdiv',constraint='lo')))
maxdec=as.matrix(optimalPortfolio(covariancematrix,meanReturns, control=list(type='maxdec',constraint='lo')))
equalweights = as.matrix(c(0.2,0.2,0.2,0.2,0.2))
meanvarReturn =  t(meanvar) %*% meanReturns
meanvarVariance =  t(meanvar) %*% covariancematrix %*% meanvar
meanvarSharpe = meanvarReturn / sqrt(meanvarVariance)
minvarReturn =  t(minvar) %*% meanReturns
minvarVariance =  t(minvar) %*%  covariancematrix %*% minvar
minvarSharpe = minvarReturn / sqrt(minvarVariance)
maxdivReturn =  t(maxdiv) %*% meanReturns
maxdivVariance =  t(maxdiv) %*%  covariancematrix %*% maxdiv
maxdivSharpe = maxdivReturn / sqrt(maxdivVariance)
maxdecReturn =  t(maxdec) %*% meanReturns
maxdecVariance =  t(maxdec) %*%  covariancematrix %*% maxdec
maxdecSharpe = maxdecReturn / sqrt(maxdecVariance)
equalweightsReturn =  t(equalweights) %*% meanReturns
equalweightsVariance =  t(equalweights) %*%  covariancematrix %*% equalweights
equalweightsSharpe = equalweightsReturn / sqrt(equalweightsVariance)
newrow = c(meanvarReturn,meanvarVariance, meanvarSharpe, minvarReturn, minvarVariance, minvarSharpe,
maxdivReturn,maxdivVariance, maxdivSharpe, maxdecReturn, maxdecVariance, maxdecSharpe,
equalweightsReturn, equalweightsVariance, equalweightsSharpe)
portfolio_returns = rbind(portfolio_returns[1:i,],newrow,portfolio_returns[-(1:i),])
if (i==1) {
stockReturns1 = as.data.frame(stockReturns)
stockPrices1 = as.data.frame(stockPrices)
stockPrices1 = cbind(days=as.numeric(rownames(stockPrices1)) , stockPrices1)
p1 <- ggplot(data = stockReturns1 , aes(x=A))+
geom_histogram(color="black" , fill="white")+
geom_vline(aes(xintercept=mean(A)), color="blue", linetype="dashed",size=1) +
labs(title = "Stock A" , x="Daily returns" , y="Frequency")+
theme(plot.title = element_text(face="bold" , hjust = 0.5))
p2 <- ggplot(data = stockReturns1 , aes(x=B))+
geom_histogram(color="black" , fill="white")+
geom_vline(aes(xintercept=mean(B)), color="blue", linetype="dashed",size=1) +
labs(title = "Stock B" , x="Daily returns" , y="Frequency")+
theme(plot.title = element_text(face="bold" , hjust = 0.5))
p3 <- ggplot(data = stockReturns1 , aes(x=C))+
geom_histogram(color="black" , fill="white")+
geom_vline(aes(xintercept=mean(C)), color="blue", linetype="dashed",size=1) +
labs(title = "Stock C" , x="Daily returns" , y="Frequency")+
theme(plot.title = element_text(face="bold" , hjust = 0.5))
p4 <- ggplot(data = stockReturns1 , aes(x=D))+
geom_histogram(color="black" , fill="white")+
geom_vline(aes(xintercept=mean(D)), color="blue", linetype="dashed",size=1) +
labs(title = "Stock D" , x="Daily returns" , y="Frequency")+
theme(plot.title = element_text(face="bold" , hjust = 0.5))
p5 <- ggplot(data = stockReturns1 , aes(x=E))+
geom_histogram(color="black" , fill="white")+
geom_vline(aes(xintercept=mean(E)), color="blue", linetype="dashed",size=1) +
labs(title = "Stock E" , x="Daily returns" , y="Frequency")+
theme(plot.title = element_text(face="bold" , hjust = 0.5))
h2 <- ggplot()+
geom_line(data=stockPrices1 , aes(x=days ,y=A ),color = "darkred") +
geom_line(data=stockPrices1 , aes(x=days ,y=B ),color = "blue") +
geom_line(data=stockPrices1 , aes(x=days ,y=C ),color = "green") +
geom_line(data=stockPrices1 , aes(x=days ,y=D), color = "orange") +
geom_line(data=stockPrices1 , aes(x=days ,y=E), color = "yellow") +
labs(title = "Prices over time" , x="Trading day" , y="Stock price")+
theme(plot.title = element_text(face="bold", hjust = 0.5))
}
}
figure<-ggarrange(p1,p2,p3,p4,p5,h2,
ncol=3,nrow=2)
figure<-annotate_figure(figure,
top = text_grob(paste("Portfolio of Stocks ",scenario) , color = "black", face = "bold", size = 14),
fig.lab = paste("Figure ",figindex), fig.lab.face = "bold")
results <- list(portfolio_returns , stockPrices, figure)
return(results)
}
portfolio_simulation(1000 , 253 , "allnormal", 1)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(meassage=FALSE)
source("Simulation.R")
simulations = 1000
tradingdays = 253
