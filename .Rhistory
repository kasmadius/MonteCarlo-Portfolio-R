getSymbols(tickers, from="2015-10-30", to="2020-10-31" , auto.assign = TRUE )
closing <- rbind(xts(cbind(AMZN$AMZN.Close , GOOGL$GOOGL.Close , PFE$PFE.Close , JPM$JPM.Close
, CVX$CVX.Close , BA$BA.Close , FAST$FAST.Close , INTC$INTC.Close,
T$T.Close , NWSA$NWSA.Close) , order.by = Sys.Date()))
tail(AMZN)
tail(PFE)
NROW(AMZN)
NROW(GOOGL)
NROW(JPM)
NROW(NWSA)
closing <- rbind(AMZN$AMZN.Close , GOOGL$GOOGL.Close , PFE$PFE.Close , JPM$JPM.Close , CVX$CVX.Close , BA$BA.Close , FAST$FAST.Close , INTC$INTC.Close,
T$T.Close , NWSA$NWSA.Close)
view(closing)
tail(AMZN)
closing <- cbind(AMZN$AMZN.Close , GOOGL$GOOGL.Close)
View(closing)
closing <- cbind(AMZN$AMZN.Close , GOOGL$GOOGL.Close , PFE$PFE.Close ,
PFE$PFE.Close  , JPM$JPM.Close , CVX$CVX.Close ,
BA$BA.Close , FAST$FAST.Close, INTC$INTC.Close, T$T.Close,
NWSA$NWSA.Close)
closing
tail(closing)
D_ret <- function(x) ROC(x , type ="discrete")
closing <- cbind(AMZN$AMZN.Close , GOOGL$GOOGL.Close , PFE$PFE.Close
, JPM$JPM.Close , CVX$CVX.Close ,
BA$BA.Close , FAST$FAST.Close, INTC$INTC.Close, T$T.Close,
NWSA$NWSA.Close)
Returns <- apply(closing , 2 , D_ret)
tail(Returns)
Returns <- apply(closing , 2 , 100*D_ret)
D_ret <- function(x) 100*ROC(x , type ="discrete")
Returns <- apply(closing , 2 , D_ret)
tail(Returns)
summary(Returns)
head(returns)
head(Returns)
Returns <- Returns[-1]
head(Returns)
D_ret <- function(x) 100*ROC(x , type ="discrete") # percentage
Returns <- apply(closing , 2 , D_ret)
Returns <- Returns[-c(1),]
head(Returns)
summary(Returns)
stats_desc <- summary(Returns)
View(stats_desc)
Var_cov <- cov(Returns)
Var_cov
View(Var_cov)
D_ave <- function(x) 100*mean(x) # percentage
Av_ret <- apply(Returns, 2, D_ave)
Av_ret
view(Av_ret)
summary(Returns)
view(Av_ret)
Cov_matrix <- as.matrix(Var_cov)
Cov_matrix
view(Cov_matrix)
ret_vector <- as.matrix(Av_ret)
ret_vector_t <- t(ret_vector)
ret_vector_t
view(ret_vector_t)
view(ret_vector)
A <- nrow(Cov_matrix) + 2
size_A <- nrow(Cov_matrix) + 2
A
D_ret <- function(x) ROC(x , type ="discrete")
D_ave <- function(x) mean(x)
Returns <- apply(closing , 2 , D_ret)
Returns <- Returns[-c(1),]
Av_ret <- apply(Returns, 2, D_ave)
Var_cov <- cov(Returns)
Rpf <- 0.08
Cov_matrix <- as.matrix(Var_cov)
ret_vector <- as.matrix(Av_ret)
ret_vector_t <- t(ret_vector)
size_A <- nrow(Cov_matrix) + 2
view(Var_cov)
view(Av_ret)
A1 <- Var_cov
A1$Av_return <- Av_ret$V1
A1$Av_return <- Av_ret
type(Av_ret)
str(Av_ret)
Av_ret <- as.matrix(apply(Returns, 2, D_ave))
str(Av_ret)
Av_ret <- as.data.frame(apply(Returns, 2, D_ave))
A1$Av_return <- Av_ret$V1
A1
view(A1)
Av_ret <- apply(Returns, 2, D_ave)
view(Av_ret)
str(Av_ret)
A1$Av_return <- Av_ret
view(A1)
A1 <- Var_cov
A <- Var_cov
view(A)
A1$Av_return <- Av_ret
Av_ret <- list(apply(Returns, 2, D_ave))
Rpf <- 0.08
Av_ret <- list(apply(Returns, 2, D_ave))
A1$Av_return <- Av_ret
A1
View(A1)
A <- Var_cov
A$Av_return <- Av_ret
Av_ret[1]
Av_ret[[1]]
view(Av_ret)
Returns
Av_ret <-apply(Returns, 2, D_ave)
Av_ret
str(Av_ret)
view(Av_ret)
Av_ret[,2]
Av_ret[,1]
typeof(Av_ret)
class(Av_ret)
Returns
Av_ret <-colmeans(Returns)
Av_ret <-colMeans(Returns)
Av_ret
A$Av_return <- Av_ret
A
View(A)
A <- as.matrix(Var_cov)
Av_ret <-as.matrix(colMeans(Returns))
A1 <- cbind(A , Av_ret )
head(A1)
View(A1)
N <- nrow(Var_cov)
V1 <- c(rep(1, N) , 0 , 0)
V1
V1 <- c(rep(1, N))
A1 <- cbind(A , Av_ret,V1 )
A <- as.matrix(Var_cov)
V1 <- c(rep(1, N))
A1 <- cbind(A , Av_ret,V1 )
A1
Av_ret_t <- c(t(Av_ret),0,0)
V1_t <- C(t(V1),0,0)
Av_ret_t
V1 <- as.matrix(c(rep(1, N)))
V1_t <- C(t(V1),0,0)
V1_t <- c(t(V1),0,0)
Av_ret_t <- as.matrix(c(t(Av_ret),0,0))
V1_t <- as.matrix(c(t(V1),0,0))
Augmented_matrix <- rbind(A1 , Av_ret_t , V1_t)
View(A1)
view(Av_ret_t)
test <- c(1, 2 , 3)
view(test)
t(test)
view(test)
view(V1)
view(t(v1))
view(t(V1))
A <- as.matrix(Var_cov)
V1 <- as.matrix(c(rep(1, N)))
V1_t <- as.matrix(c(t(V1),0,0))
view(V1_t)
A <- as.matrix(Var_cov)
V1 <- as.matrix(c(rep(1, N)))
V1_t <- t(V1)
V1_t(view)
V1_t <- t(V1)
view(V1_t)
V1_t <- c(V1_t , 0 , 0)
View(Av_ret_t)
Av_ret_t <- t(Av_ret)
view(Av_ret_t)
Av_ret_t <- c(Av_ret_t , 0 , 0 )
Augmented_matrix <- rbind(A1 , Av_ret_t , V1_t)
View(Augmented_matrix)
b_vector <- as.matrix(rep(0, N) , Rpf , 1)
b_vector
b_vector <- as.matrix(c(rep(0, N) , Rpf , 1))
b_vector
Inv_augmented <- solve(Augmented_matrix)
w <- Inv_augmented %*% b_vector
view(w)
sum(w)
-0.013708 + 10.016604459
-9.013708 + 10.016604459
1.002896 - 	0.002896522
stock_weights <- w[1:n , ]
stock_weights <- w[1:N]
stock_weights
w
view(stock_weights)
stock_weights_t <- t(stock_weights)
Rpf_est <- stock_weights_t %*% Av_ret
Rpf_est
view(Cov_matrix)
Av_ret_t <- as.matrix(c(t(Av_ret),0,0))
variance <- stock_weights_t %*% Var_cov %*% stock_weights
variance
sqrt(variance)
Front <- function(Cov_matrix , average_return ,rate_return) {
N <- nrow(Cov_matrix)
Aug <- as.matrix(Cov_matrix)
V_1 <- as.matrix(c(rep(1,N)))
Aug_1 <- cbind(Aug ,average_return, V_1 )
average_return_t <- as.matrix(c(t(average_return),0 , 0))
V_1_t <- as.matrix(c(t(V_1),0,0))
Augmented_matrix_1 <- rbind(Aug_1 ,average_return_t,V_1_t)
inverse <- solve( Augmented_matrix_1)
B_vect <- as.matrix(c(rep(0, N) ,rate_return , 1 ))
wt <- inverse %*% B_vect
stock_wt <- wt[1:N]
stock_wt_t <- t(stock_wt)
port_return <- stock_wt_t %*% average_return
port_variance <- stock_wt_t %*% Cov_matrix %*% stock_wt
port_std <- sqrt(port_variance)
Data_1 <- c( port_return , port_std)
return(Data_1)
}
Front(Var_cov , Av_ret , 0.08 )
Front <- function(Cov_matrix , average_return ,rate_return) {
N <- nrow(Cov_matrix)
Aug <- as.matrix(Cov_matrix)
V_1 <- as.matrix(c(rep(1,N)))
Aug_1 <- cbind(Aug ,average_return, V_1 )
average_return_t <- as.matrix(t(average_return))
average_return_t <- c(average_return_t , 0 , 0)
V_1_t <- as.matrix(t(V_1))
V_1_t <- c(V_1_t , 0, 0 )
Augmented_matrix_1 <- rbind(Aug_1 ,average_return_t,V_1_t)
inverse <- solve( Augmented_matrix_1)
B_vect <- as.matrix(c(rep(0, N) ,rate_return , 1 ))
wt <- inverse %*% B_vect
stock_wt <- wt[1:N]
stock_wt_t <- t(stock_wt)
port_return <- stock_wt_t %*% average_return
port_variance <- stock_wt_t %*% Cov_matrix %*% stock_wt
port_std <- sqrt(port_variance)
Data_1 <- c( port_return , port_std)
return(Data_1)
}
Front(Var_cov , Av_ret , 0.08 )
a <- 20
b <- 2
n <- 18
inc <- (a - b)/n
l <- c()
l <- c(b)
a <- 20
b <- 2
n <- 18
inc <- (a - b)/n
l <- c(b)
for (i in n) {
l[i+1] <- l[i] + inc
}
l
for (i in n) {
l[i+1] <- (l[i] + 2)
}
l
for (i in n) {
l[i+1] = (l[i] + 2)
}
l
l[2] <- 3
l
l[3] <- l[1] + 1
l
l[3+2] <- l[1] + 1
l
a <- 20
b <- 2
n <- 18
inc <- (a - b)/n
l <- c(b)
for (i in n) {
z <- i
l[i+1] <- (l[z] + inc)
}
l
for (i in n) {
z <- i
l[i+1] <- l[z] + inc
}
l
l[2] <- l[1] + inc
l
l <- c(b)
l[2] <- l[1] + inc
l
l[3] <- l[2] + inc
l
for (i in 1:n) {
a <- 20
b <- 2
n <- 18
inc <- (a - b)/n
l <- c(b)
l[i+1] <- l[i] + inc
}
l
for (i in 1:n) {
a <- 20
b <- 2
n <- 18
inc <- (a - b)/n
l <- c(b)
l[[i+1]] <- l[[i]] + inc
}
for (i in 1:n) {
a <- 20
b <- 2
n <- 18
inc <- (a - b)/n
l <- c(b)
l[[i+1]] <- l[i] + inc
}
l
l <- numeric(n)
l[1] <- b
for (i in 1:n) {
l[i+1] <- l[i] + inc
}
l
a <- 20
b <- 2
n <- 18
inc = (a - b)/n
c = seq(b , a , inc)
c
view(c)
df_t <- data.frame(x=1:3 , y=c("a","b","c"))
df_t
for (i in 3) {
df_t[i , 2] <- i+30
}
for (i in 3) {
df_t[i , 2] = i+30
}
df_t
df[1,2]
df_t[1,2]
df_t[1,2] <- 30
df_t <- data.frame(x=1:3 , y=1:3)
df_t
df_t[1,2] <- 30
df_t
for (i in 1:3) { df[i , 2] <- 2}
for (i in 1:3) { df_t[i , 2] <- 2}
df_t
Frontier <- function(lower_bound_r,upper_bound_r, number ,Cov_matrix , average_return) {
increments = (upper_bound_r - lower_bound_r)/number
ret <- seq(lower_bound_r , upper_bound_r , increments)
rows = number + 1
df <- data.frame(Expected_return = ret , y= 1:rows)
for (i in rows ) {
df[i , 2] <- Porfolio_variance(Cov_matrix , average_return , df[i,1])
}
}
Porfolio_variance <- function(Cov_matrix , average_return ,rate_return) {
N <- nrow(Cov_matrix)
Aug <- as.matrix(Cov_matrix)
V_1 <- as.matrix(c(rep(1,N)))
Aug_1 <- cbind(Aug ,average_return, V_1 )
average_return_t <- as.matrix(t(average_return))
average_return_t <- c(average_return_t , 0 , 0)
V_1_t <- as.matrix(t(V_1))
V_1_t <- c(V_1_t , 0, 0 )
Augmented_matrix_1 <- rbind(Aug_1 ,average_return_t,V_1_t)
inverse <- solve( Augmented_matrix_1)
B_vect <- as.matrix(c(rep(0, N) ,rate_return , 1 ))
wt <- inverse %*% B_vect
stock_wt <- wt[1:N]
stock_wt_t <- t(stock_wt)
port_return <- stock_wt_t %*% average_return
port_variance <- stock_wt_t %*% Cov_matrix %*% stock_wt
port_std <- sqrt(port_variance)
return(port_std)
}
Frontier <- function(lower_bound_r,upper_bound_r, number ,Cov_matrix , average_return) {
increments = (upper_bound_r - lower_bound_r)/number
ret <- seq(lower_bound_r , upper_bound_r , increments)
rows = number + 1
df <- data.frame(Expected_return = ret , y= 1:rows)
for (i in rows ) {
df[i , 2] <- Porfolio_variance(Cov_matrix , average_return , df[i,1])
}
return(df)
}
Frontier(0.01 , 0.15 , 15 , Var_cov , Av_ret)
Porfolio_variance(Var_cov , Av_ret , 0.15)
Porfolio_variance(Var_cov , Av_ret , 0.08 )
Porfolio_variance(Var_cov , Av_ret , 0.07 )
Porfolio_variance(Var_cov , Av_ret , 0.02866667 )
df_t <- data.frame(Mean_returns = seq(0.01 , 0.15 , 0.01) , y= 1:15)
df_t
for (i in 1:15) {
df_t[i , 2] <- Porfolio_variance(Var_cov , Av_ret , df_t[i,1])
}
df_t
Frontier <- function(lower_bound_r,upper_bound_r, number ,Cov_matrix , average_return) {
increments = (upper_bound_r - lower_bound_r)/number
ret <- seq(lower_bound_r , upper_bound_r , increments)
rows = number + 1
df <- data.frame(Expected_return = ret , y= 1:rows)
for (i in 1:rows ) {
df[i , 2] <- Porfolio_variance(Cov_matrix , average_return , df[i,1])
}
return(df)
}
Frontier(0.01 , 0.15 , 30 , Var_cov , Av_ret)
Var_cov_2 <- matrix(c(0.4 , 0.03 , 0.02 , 0.00 , 0.03 , 0.2 , 0.00 , -0.06 ,
0.02 , 0.00 , 0.3 , 0.03 , 0.00 , -0.06 , 0.03 , 0.1) , ncol= 4)
view(Var_cov_2)
Av_ret_2 <- matrix(c(0.06 , 0.05 , 0.07 , 0.08))
Frontier(0.03 , 0.09 , 13 , Var_cov_2 , Av_ret_2)
Test_front <- Frontier(0.03 , 0.09 , 13 , Var_cov_2 , Av_ret_2)
Frontier <- function(lower_bound_r,upper_bound_r, number ,Cov_matrix , average_return) {
increments = (upper_bound_r - lower_bound_r)/number
ret <- seq(lower_bound_r , upper_bound_r , increments)
rows = number + 1
df <- data.frame(Expected_return = ret , Standard_deviation= 1:rows)
for (i in 1:rows ) {
df[i , 2] <- Porfolio_variance(Cov_matrix , average_return , df[i,1])
}
return(df)
}
vi
Test_front <- Frontier(0.03 , 0.09 , 13 , Var_cov_2 , Av_ret_2)
plot_1 <- ggplot(data=Test_front , aes(x =Standard_deviation , y =Expected_return )) +
geom_smooth() +
ggtitle("Efficient Frontier") +
xlab("Portfolio standard deviation") +
ylab("Portfolio Expected return")
plot_1
Test_front
plot_1 <- ggplot(data=Test_front , aes(x =Standard_deviation , y =Expected_return )) +
geom_point() +
ggtitle("Efficient Frontier") +
xlab("Portfolio standard deviation") +
ylab("Portfolio Expected return")
plot_1
Front_1 <- Frontier(0.01 , 0.15 , 30 , Var_cov , Av_ret)
plot_2 <- ggplot(data=Front_1 , aes(x =Standard_deviation , y =Expected_return )) +
geom_point() +
ggtitle("Efficient Frontier") +
xlab("Portfolio standard deviation") +
ylab("Portfolio Expected return")
plot_2
Front_1
Var_cov
view(Var_cov)
library(quantmod)
library(timeSeries)
library(fPortfolio)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
#Vector of Stock Tickers
tickers=c("GOOGL", "AMZN", "PFE", "JPM", "CVX", "BA", "FAST", "INTC",
"T", "NWSA")
#Daily Prices for the last five years
stockPrices = NULL
for (ticker in tickers)
stockPrices = cbind(stockPrices,
getSymbols.yahoo(ticker, from="2015-01-01",
periodicity = "daily",
auto.assign=FALSE)[,4])
#Keep dates that have closing prices for all tickers
stockPrices = stockPrices[apply(stockPrices, 1, function(x) all(!is.na(x))),]
#Rename Columns matching stock ticker names
colnames(stockPrices) = tickers
#Daily Rate of Change
stockReturns = na.omit(ROC(stockPrices, type="discrete"))
stockReturns = as.timeSeries(stockReturns)
#efficient frontier
effFrontier = portfolioFrontier(stockReturns, constraints = "LongOnly")
#Plot efficient frontier
#Plot options fportfolio
#1 - Plot efficient frontier
#2 - Plot Min Variance Portfolio
#3 - Plot Tangency Portfolio
#4 - Plot Risk Returns of each ticker
#5 - Plot Equal Weights Portfolio
#6 - Plot Two Asset Frontiers
#7 - Plot Monte Carlo Portfolios
#8 - Plot Sharpe Ratio
plot(effFrontier, 1)
O <- seq(1 , 20 , 1)
s <- seq(20 ,1 , -1)
s
o
O
f <- cov(O ,s)
f
Var_cov
view(Var_cov)
Returns
view(Returns)
library(writexl)
install.packages("writexl")
library(writexl)
write_xlsx(closing , "C:/Users/nabil/OneDrive/Bureau/M.Sc/Stat_learning/Paper/Simulation/MonteCarlo-Portfolio-R")
closing <- cbind(AMZN$AMZN.Close , GOOGL$GOOGL.Close , PFE$PFE.Close
, JPM$JPM.Close , CVX$CVX.Close ,
BA$BA.Close , FAST$FAST.Close, INTC$INTC.Close, T$T.Close,
NWSA$NWSA.Close)
write_xlsx(closing , "C:/Users/nabil/OneDrive/Bureau/M.Sc/Stat_learning/Paper/Simulation/MonteCarlo-Portfolio-R")
closing <- as.data.frame(closing)
write_xlsx(closing , "C:/Users/nabil/OneDrive/Bureau/M.Sc/Stat_learning/Paper/Simulation/MonteCarlo-Portfolio-R")
closing <- as.data.frame(closing)
write_xlsx(closing , "C:/Users/nabil/OneDrive/Bureau/M.Sc/Stat_learning")
